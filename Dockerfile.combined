# Multi-stage build for combined frontend + backend deployment
FROM oven/bun:1 as frontend-build

# Build frontend
WORKDIR /app/frontend
COPY frontend/package.json frontend/bun.lockb ./
RUN bun install

# Build-time environment variables for frontend
ARG VITE_API_URL
ARG VITE_CLERK_PUBLISHABLE_KEY
ARG CLOUDINARY_CLOUD_NAME
ARG CLOUDINARY_API_KEY
ARG CLOUDINARY_API_SECRET
ARG CLOUDINARY_UPLOAD_PRESET

# Set environment variables for the build
ENV VITE_API_URL=$VITE_API_URL
ENV VITE_CLERK_PUBLISHABLE_KEY=$VITE_CLERK_PUBLISHABLE_KEY
ENV CLOUDINARY_CLOUD_NAME=$CLOUDINARY_CLOUD_NAME
ENV CLOUDINARY_API_KEY=$CLOUDINARY_API_KEY
ENV CLOUDINARY_API_SECRET=$CLOUDINARY_API_SECRET
ENV CLOUDINARY_UPLOAD_PRESET=$CLOUDINARY_UPLOAD_PRESET

COPY frontend/ .
RUN bun run build

# Main stage - Backend with frontend served statically
FROM oven/bun:1

# Install OpenSSL for Prisma
RUN apt-get update -y && apt-get install -y openssl

WORKDIR /app

# Runtime environment variables
ARG CLOUDINARY_CLOUD_NAME
ARG CLOUDINARY_API_KEY
ARG CLOUDINARY_API_SECRET
ARG CLOUDINARY_UPLOAD_PRESET
ARG NODE_ENV

ENV CLOUDINARY_CLOUD_NAME=$CLOUDINARY_CLOUD_NAME
ENV CLOUDINARY_API_KEY=$CLOUDINARY_API_KEY
ENV CLOUDINARY_API_SECRET=$CLOUDINARY_API_SECRET
ENV CLOUDINARY_UPLOAD_PRESET=$CLOUDINARY_UPLOAD_PRESET
ENV NODE_ENV=$NODE_ENV

# Copy backend files
COPY backend/package.json backend/bun.lockb ./
RUN bun install

COPY backend/ .

# Build the TypeScript backend
RUN bun run build

# Copy built frontend to backend's public directory
RUN mkdir -p public
COPY --from=frontend-build /app/frontend/dist ./public

# Copy Prisma files and generate client
COPY backend/prisma ./prisma
RUN bunx prisma generate

# Expose port
EXPOSE 4000

# Start the backend server (which will also serve frontend static files)
CMD ["bun", "run", "start"]
